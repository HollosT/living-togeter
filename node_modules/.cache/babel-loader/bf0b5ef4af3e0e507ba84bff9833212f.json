{"ast":null,"code":"import { Namespaces } from '@vue/compiler-core';\nimport { isRef, ref } from '@vue/reactivity';\nimport { useStore } from 'vuex';\nexport default {\n  emits: ['save-data'],\n  setup: function setup(_, context) {\n    var store = useStore();\n    var buildings = store.getters[\"buildings/buildings\"];\n    var formIsValid = ref(true);\n    var name = ref({\n      val: '',\n      isValid: true\n    });\n    var address = ref({\n      country: {\n        val: '',\n        isUnique: true,\n        isValid: true\n      },\n      city: {\n        val: '',\n        isUnique: true,\n        isValid: true\n      },\n      postalCode: {\n        val: '',\n        isUnique: true,\n        isValid: true\n      },\n      street: {\n        val: '',\n        isUnique: true,\n        isValid: true\n      },\n      buildingNumber: {\n        val: '',\n        isUnique: true,\n        isValid: true\n      }\n    });\n    var flats = ref({\n      val: '',\n      isValid: true\n    });\n    var description = ref({\n      val: '',\n      isValid: true\n    });\n\n    // Checking the address\n    // function checkValidation() {\n    // function addressValidation(input) {\n    //     buildings.forEach(bld => {\n    //     const existingAddress = bld.address\n\n    //     if(existingAddress[input] === address.value[input].val) {\n    //       address.value[input].isUnique = false\n    //     }\n\n    //   })\n\n    // }\n    //     let falseArr = []\n    //     for(const key in address.value) {\n    //       if(address.value[key].isUnique === false) {\n    //         falseArr.push(key)\n\n    //       }\n\n    //     }\n    //     if(falseArr.length === 5) {\n    //       formIsValid.value = false;\n    //       for(const key in address.value) {\n    //         // if(address.value[key].isUnique === false) {\n    //         //   address.value[key].val = ''\n    //         //   // address.value[key].isUnique = \n\n    //         // }\n\n    //     }\n    //     }\n    // }\n\n    function submitForm() {\n      var buildingWannabe = {\n        address: {\n          country: address.value.country.val,\n          city: address.value.city.val,\n          street: address.value.street.val,\n          buildingNumber: address.value.buildingNumber.val,\n          postalCode: address.value.postalCode.val\n        },\n        flats: flats.value.val,\n        name: name.value.val,\n        description: description.value.val\n      };\n      context.emit('save-data', buildingWannabe);\n    }\n    return {\n      name: name,\n      address: address,\n      flats: flats,\n      description: description,\n      submitForm: submitForm\n    };\n  }\n};","map":{"version":3,"mappings":"AAiDA,SAASA,UAAS,QAAS,oBAAmB;AAC9C,SAASC,KAAK,EAAEC,GAAE,QAAS,iBAAgB;AAC3C,SAASC,QAAO,QAAS,MAAK;AAI9B,eAAe;EACXC,KAAK,EAAE,CAAC,WAAW,CAAC;EAGpBC,KAAK,iBAACC,CAAC,EAAEC,OAAO,EAAE;IACd,IAAMC,KAAI,GAAIL,QAAQ,EAAC;IACvB,IAAMM,SAAQ,GAAKD,KAAK,CAACE,OAAO,CAAC,qBAAqB;IAEtD,IAAMC,WAAU,GAAIT,GAAG,CAAC,IAAI;IAC5B,IAAMU,IAAG,GAAIV,GAAG,CAAC;MACTW,GAAG,EAAE,EAAE;MACPC,OAAO,EAAE;IACjB,CAAC;IACD,IAAMC,OAAM,GAAIb,GAAG,CAAC;MAChBc,OAAO,EAAE;QACLH,GAAG,EAAE,EAAE;QACPI,QAAQ,EAAE,IAAI;QACdH,OAAO,EAAE;MACb,CAAC;MACDI,IAAI,EAAE;QACFL,GAAG,EAAE,EAAE;QACPI,QAAQ,EAAE,IAAI;QACdH,OAAO,EAAE;MACb,CAAC;MACDK,UAAU,EAAE;QACRN,GAAG,EAAE,EAAE;QACPI,QAAQ,EAAE,IAAI;QACdH,OAAO,EAAE;MACb,CAAC;MACDM,MAAM,EAAE;QACJP,GAAG,EAAE,EAAE;QACPI,QAAQ,EAAE,IAAI;QACdH,OAAO,EAAE;MACb,CAAC;MACDO,cAAc,EAAE;QACZR,GAAG,EAAE,EAAE;QACPI,QAAQ,EAAE,IAAI;QACdH,OAAO,EAAE;MACb;IACJ,CAAC;IACD,IAAMQ,KAAI,GAAIpB,GAAG,CAAC;MACVW,GAAG,EAAE,EAAE;MACPC,OAAO,EAAE;IACjB,CAAC;IACD,IAAMS,WAAU,GAAIrB,GAAG,CAAC;MAChBW,GAAG,EAAE,EAAE;MACPC,OAAO,EAAE;IACjB,CAAC;;IAID;IACA;IACF;IACA;IACA;;IAEA;IACA;IACA;;IAGA;;IAEA;IACF;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;;IAMA,SAASU,UAAU,GAAG;MAClB,IAAMC,eAAc,GAAI;QACtBV,OAAO,EAAE;UACLC,OAAO,EAAED,OAAO,CAACW,KAAK,CAACV,OAAO,CAACH,GAAG;UAClCK,IAAI,EAAEH,OAAO,CAACW,KAAK,CAACR,IAAI,CAACL,GAAG;UAC5BO,MAAM,EAAEL,OAAO,CAACW,KAAK,CAACN,MAAM,CAACP,GAAG;UAChCQ,cAAc,EAAEN,OAAO,CAACW,KAAK,CAACL,cAAc,CAACR,GAAG;UAChDM,UAAU,EAAEJ,OAAO,CAACW,KAAK,CAACP,UAAU,CAACN;QACzC,CAAC;QACDS,KAAK,EAAEA,KAAK,CAACI,KAAK,CAACb,GAAG;QACtBD,IAAI,EAAEA,IAAI,CAACc,KAAK,CAACb,GAAG;QACpBU,WAAW,EAAEA,WAAW,CAACG,KAAK,CAACb;MACnC;MACAN,OAAO,CAACoB,IAAI,CAAC,WAAW,EAAEF,eAAe;IAC3C;IAIA,OAAO;MAACb,IAAI,EAAJA,IAAI;MAAEG,OAAO,EAAPA,OAAO;MAAEO,KAAK,EAALA,KAAK;MAAEC,WAAW,EAAXA,WAAW;MAAEC,UAAU,EAAVA;IAAU;EACzD;AACA","names":["Namespaces","isRef","ref","useStore","emits","setup","_","context","store","buildings","getters","formIsValid","name","val","isValid","address","country","isUnique","city","postalCode","street","buildingNumber","flats","description","submitForm","buildingWannabe","value","emit"],"sourceRoot":"","sources":["/Users/tamashollos/Git/living-togeter/src/components/buildings/BuildingForm.vue"],"sourcesContent":["<template>\n      <base-form @submit.prevent=\"submitForm\">\n\n        <div class=\"input-container\">\n          <label for=\"name\">Add a name for your community:</label>\n          <input type=\"text\" id=\"name\" v-model.trim=\"name.val\" requeired autofocus >\n        </div>\n\n       <div class=\"input-container\">\n          <label for=\"country\">Country:</label>\n          <input type=\"text\" id=\"country\" v-model.trim=\"address.country.val\" requeired >\n        </div> \n\n        <div class=\"input-container\">\n          <label for=\"city\">City:</label>\n          <input type=\"text\" id=\"city\" v-model.trim=\"address.city.val\" requeired>\n        </div>\n\n        <div class=\"input-container\">\n          <label for=\"postalCode\">Postal code:</label>\n          <input type=\"number\" id=\"postalCode\" v-model.trim=\"address.postalCode.val\" requeired>\n        </div>\n\n        <div class=\"input-container\">\n          <label for=\"street\">Street:</label>\n          <input type=\"text\" id=\"street\" v-model.trim=\"address.street.val\" requeired>\n        </div>\n\n        <div class=\"input-container\">\n          <label for=\"buildingNumber\">Building number:</label>\n          <input type=\"number\" id=\"buildingNumber\" v-model.trim=\"address.buildingNumber.val\" requeired >\n        </div>\n        <div class=\"input-container\">\n          <label for=\"flats\">Number of flats:</label>\n          <input type=\"number\" id=\"flats\" v-model.trim=\"flats.val\" requeired >\n        </div>\n        <div class=\"input-container\">\n          <label for=\"description\">Description:</label>\n          <textarea  id=\"description\"  rows=\"3\" v-model.trim=\"description.val\" requeired ></textarea>\n        </div>\n\n        <!-- <p v-if=\"!formIsValid\">Sorry, but there is alr</p> -->\n     \n  \n        <base-button type=\"filled\">Send</base-button>\n      </base-form>\n</template>\n\n<script>\nimport { Namespaces } from '@vue/compiler-core'\nimport { isRef, ref } from '@vue/reactivity'\nimport { useStore } from 'vuex'\n\n\n\nexport default {\n    emits: ['save-data'],\n\n\n    setup(_, context) {\n        const store = useStore()\n        const buildings =  store.getters[\"buildings/buildings\"]\n        \n        const formIsValid = ref(true)\n        const name = ref({\n                val: '',\n                isValid: true\n        })\n        const address = ref({\n            country: {\n                val: '',\n                isUnique: true,\n                isValid: true\n            },\n            city: {\n                val: '',\n                isUnique: true,\n                isValid: true\n            },\n            postalCode: {\n                val: '',\n                isUnique: true,\n                isValid: true\n            },\n            street: {\n                val: '',\n                isUnique: true,\n                isValid: true\n            },\n            buildingNumber: {\n                val: '',\n                isUnique: true,\n                isValid: true\n            }\n        })\n        const flats = ref({\n                val: '',\n                isValid: true\n        })\n        const description = ref({\n                val: '',\n                isValid: true\n        })\n \n        \n        \n        // Checking the address\n        // function checkValidation() {\n      // function addressValidation(input) {\n      //     buildings.forEach(bld => {\n      //     const existingAddress = bld.address\n  \n      //     if(existingAddress[input] === address.value[input].val) {\n      //       address.value[input].isUnique = false\n      //     }\n  \n              \n      //   })\n                    \n      // }\n    //     let falseArr = []\n    //     for(const key in address.value) {\n    //       if(address.value[key].isUnique === false) {\n    //         falseArr.push(key)\n\n    //       }\n          \n    //     }\n    //     if(falseArr.length === 5) {\n    //       formIsValid.value = false;\n    //       for(const key in address.value) {\n    //         // if(address.value[key].isUnique === false) {\n    //         //   address.value[key].val = ''\n    //         //   // address.value[key].isUnique = \n\n    //         // }\n          \n    //     }\n    //     }\n    // }\n\n\n\n\n\n    function submitForm() {\n        const buildingWannabe = {\n          address: {\n              country: address.value.country.val,\n              city: address.value.city.val,\n              street: address.value.street.val,\n              buildingNumber: address.value.buildingNumber.val, \n              postalCode: address.value.postalCode.val,\n          },\n          flats: flats.value.val,\n          name: name.value.val,\n          description: description.value.val,\n      }\n      context.emit('save-data', buildingWannabe)\n    }\n\n\n\n    return {name, address, flats, description, submitForm}\n}\n}\n</script>\n\n<style scoped> \n    .input-container {\n        width: 80%;\n        margin: auto;\n        display: flex;\n        gap: 2vw;\n        margin-bottom: 3vw;\n    }\n\n    input,\n    textarea {\n        width: 25vw;\n        border-radius: .5vw;\n\n    }\n\n\n</style>"]},"metadata":{},"sourceType":"module"}