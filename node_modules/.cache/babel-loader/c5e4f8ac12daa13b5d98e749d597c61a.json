{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_community_list = _resolveComponent(\"community-list\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"h1\", null, _toDisplayString($setup.building.name), 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString($setup.applications[0]) + \" \", 1 /* TEXT */), _createVNode(_component_community_list, {\n    applications: _ctx.members\n  }, null, 8 /* PROPS */, [\"applications\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;;6DACEA,oBAA0B,6BAApBC,eAAQ,CAACC,IAAI,mCAAO,GAE5B,oBAAED,mBAAY,OAAK,GACjB,8BAAyDE;IAAxCC,YAAY,EAAEC;EAAO","names":["_createElementVNode","$setup","name","_component_community_list","applications","_ctx"],"sourceRoot":"","sources":["/Users/tamashollos/Git/living-togeter/src/pages/community/Community.vue"],"sourcesContent":["<template>\n  <h1>{{building.name}}</h1>\n\n{{applications[0]}}\n  <community-list :applications=\"members\"></community-list>\n\n</template>\n\n<script>\nimport { ref } from '@vue/reactivity'\nimport { useStore } from 'vuex'\nimport CommunityList from '@/components/community/CommunityList.vue'\n\nexport default {\n  components: { CommunityList },\n    setup() {\n        const store = useStore()\n        const applications = ref([])\n        const building = ref({})\n\n\n        async function init() {\n            const buildingId = localStorage.getItem('buildingMember')\n            try {\n                // Fetch the current building\n                await store.dispatch('buildings/loadBuilding', buildingId)\n\n               const curBuilding = await store.getters['buildings/buildings']\n                building.value = curBuilding\n\n\n                // Fetch the residents of the building\n                await store.dispatch('residents/fetchApplications', buildingId)\n\n                const curApplications = await store.getters['residents/getApplications']\n                applications.value = curApplications\n\n                console.log(applications.value);\n\n\n            } catch(err) {\n                console.log(err);\n            }\n\n        }\n        \n        init()\n        \n\n        return {building, applications}\n    }\n\n\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}