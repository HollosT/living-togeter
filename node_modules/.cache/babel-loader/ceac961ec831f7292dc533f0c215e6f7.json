{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tamashollos/Git/living-togeter/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/tamashollos/Git/living-togeter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport { ref } from '@vue/reactivity';\nimport { useStore } from 'vuex';\nimport PostList from './PostList.vue';\nexport default {\n  components: {\n    PostList: PostList\n  },\n  setup: function setup() {\n    var store = useStore();\n    var isPosting = ref(false);\n    var post = ref('');\n    var posts = ref([]);\n    function addPost() {\n      isPosting.value = true;\n    }\n    function cancelPost() {\n      isPosting.value = false;\n    }\n    function uploadPost(_x) {\n      return _uploadPost.apply(this, arguments);\n    }\n    function _uploadPost() {\n      _uploadPost = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(e) {\n        var userId, profile, curDate, postWannabe;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                userId = localStorage.getItem('userId');\n                _context.next = 4;\n                return store.dispatch('profiles/fetchProfile', userId);\n              case 4:\n                profile = store.getters['profiles/getProfile'];\n                curDate = new Date().toLocaleString('eu-dk').split(',');\n                postWannabe = {\n                  userId: userId,\n                  email: localStorage.getItem('email'),\n                  post: post.value,\n                  date: curDate,\n                  firstName: profile.firstName,\n                  lastName: profile.lastName\n                };\n                _context.next = 9;\n                return store.dispatch('posts/generatePost', postWannabe);\n              case 9:\n                post.value = '';\n                e.target.value = '';\n                isPosting.value = false;\n                _context.next = 17;\n                break;\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 14]]);\n      }));\n      return _uploadPost.apply(this, arguments);\n    }\n    function init() {\n      return _init.apply(this, arguments);\n    }\n    function _init() {\n      _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var postsArr;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return store.dispatch('posts/loadPosts');\n              case 3:\n                postsArr = store.getters['posts/getPosts'];\n                console.log();\n                posts.value = postsArr;\n                _context2.next = 11;\n                break;\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 8]]);\n      }));\n      return _init.apply(this, arguments);\n    }\n    init();\n    return {\n      addPost: addPost,\n      isPosting: isPosting,\n      cancelPost: cancelPost,\n      post: post,\n      uploadPost: uploadPost,\n      posts: posts\n    };\n  }\n};","map":{"version":3,"mappings":";;;AAeA,SAASA,GAAE,QAAS,iBAAgB;AACpC,SAASC,QAAO,QAAS,MAAK;AAC9B,OAAOC,QAAO,MAAO,gBAAe;AAGpC,eAAe;EACbC,UAAU,EAAE;IAAED,QAAO,EAAPA;EAAS,CAAC;EAGtBE,KAAK,mBAAG;IACJ,IAAMC,KAAI,GAAIJ,QAAQ,EAAC;IACvB,IAAMK,SAAQ,GAAIN,GAAG,CAAC,KAAK;IAC3B,IAAMO,IAAG,GAAIP,GAAG,CAAC,EAAE;IACnB,IAAMQ,KAAI,GAAIR,GAAG,CAAC,EAAE;IAEpB,SAASS,OAAO,GAAG;MACfH,SAAS,CAACI,KAAI,GAAI,IAAG;IACzB;IACA,SAASC,UAAU,GAAG;MAClBL,SAAS,CAACI,KAAI,GAAI,KAAI;IAC1B;IAAA,SAEeE,UAAU;MAAA;IAAA;IAAA;MAAA,yEAAzB,iBAA0BC,CAAC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEbC,MAAK,GAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;gBAAA;gBAAA,OAEvCX,KAAK,CAACY,QAAQ,CAAC,uBAAuB,EAAEH,MAAM;cAAA;gBAC9CI,OAAM,GAAIb,KAAK,CAACc,OAAO,CAAC,qBAAqB;gBAE7CC,OAAM,GAAI,IAAIC,IAAI,EAAE,CAACC,cAAc,CAAC,OAAO,CAAC,CAACC,KAAK,CAAC,GAAG;gBAEtDC,WAAU,GAAI;kBAChBV,MAAM,EAAEA,MAAM;kBACdW,KAAK,EAAEV,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;kBACpCT,IAAI,EAAEA,IAAI,CAACG,KAAK;kBAChBgB,IAAI,EAAEN,OAAO;kBACbO,SAAS,EAAET,OAAO,CAACS,SAAS;kBAC5BC,QAAQ,EAAEV,OAAO,CAACU;gBACtB;gBAAA;gBAAA,OAEMvB,KAAK,CAACY,QAAQ,CAAC,oBAAoB,EAAEO,WAAW;cAAA;gBACtDjB,IAAI,CAACG,KAAI,GAAI,EAAC;gBACdG,CAAC,CAACgB,MAAM,CAACnB,KAAI,GAAI,EAAC;gBAClBJ,SAAS,CAACI,KAAI,GAAI,KAAI;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAKtBoB,OAAO,CAACC,GAAG,aAAK;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAExB;MAAA;IAAA;IAAA,SAEeC,IAAI;MAAA;IAAA;IAAA;MAAA,mEAAnB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAEc3B,KAAK,CAACY,QAAQ,CAAC,iBAAiB;cAAA;gBAEhCgB,QAAO,GAAI5B,KAAK,CAACc,OAAO,CAAC,gBAAgB;gBAC/CW,OAAO,CAACC,GAAG,EAAE;gBACbvB,KAAK,CAACE,KAAI,GAAIuB,QAAO;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAIrBH,OAAO,CAACC,GAAG,cAAK;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAExB;MAAA;IAAA;IAEAC,IAAI,EAAC;IAEL,OAAO;MAACvB,OAAO,EAAPA,OAAO;MAAEH,SAAS,EAATA,SAAS;MAAEK,UAAU,EAAVA,UAAU;MAAEJ,IAAI,EAAJA,IAAI;MAAEK,UAAU,EAAVA,UAAU;MAAEJ,KAAK,EAALA;IAAK;EACnE;AACJ","names":["ref","useStore","PostList","components","setup","store","isPosting","post","posts","addPost","value","cancelPost","uploadPost","e","userId","localStorage","getItem","dispatch","profile","getters","curDate","Date","toLocaleString","split","postWannabe","email","date","firstName","lastName","target","console","log","init","postsArr"],"sourceRoot":"","sources":["/Users/tamashollos/Git/living-togeter/src/components/community/Post.vue"],"sourcesContent":["<template>\n  <h2>Posts</h2>\n  <base-button v-if=\"!isPosting\" @click=\"addPost\" type=\"filled\">Share your thoughts...</base-button>\n  <div v-if=\"isPosting\">\n      <textarea  cols=\"50\" rows=\"5\" autofocus placeholder=\"...\" v-model.trim=\"post\"></textarea>\n        <div>\n            <base-button @click=\"cancelPost\" type=\"filled\">Cancel</base-button>\n            <base-button  @click=\"uploadPost\" type=\"filled\">Post</base-button>\n        </div>\n  </div>\n  <p v-if=\"!posts.length > 0\">There are no posts for this community yet...</p>\n  <post-list v-else :posts=\"posts\"></post-list>\n</template>\n\n<script>\nimport { ref } from '@vue/reactivity'\nimport { useStore } from 'vuex'\nimport PostList from './PostList.vue'\n\n\nexport default {\n  components: { PostList },\n\n\n    setup() {\n        const store = useStore()\n        const isPosting = ref(false)\n        const post = ref('')\n        const posts = ref([])\n\n        function addPost() {\n            isPosting.value = true\n        }\n        function cancelPost() {\n            isPosting.value = false\n        }\n\n        async function uploadPost(e) {\n            try{\n                const userId = localStorage.getItem('userId');\n\n                await store.dispatch('profiles/fetchProfile', userId)\n                const profile = store.getters['profiles/getProfile']\n\n                const curDate = new Date().toLocaleString('eu-dk').split(',')\n\n                const postWannabe = {\n                    userId: userId,\n                    email: localStorage.getItem('email'),\n                    post: post.value,\n                    date: curDate,\n                    firstName: profile.firstName,\n                    lastName: profile.lastName\n                }\n\n                await store.dispatch('posts/generatePost', postWannabe)\n                post.value = ''\n                e.target.value = ''\n                isPosting.value = false\n                \n\n\n            }catch(err) {\n                console.log(err);\n            }\n        }\n\n        async function init() {\n            try {\n                await store.dispatch('posts/loadPosts')\n\n                const postsArr = store.getters['posts/getPosts']\n                console.log();\n                posts.value = postsArr\n\n\n            }catch (err) {\n                console.log(err);\n            }\n        }\n\n        init()\n\n        return {addPost, isPosting, cancelPost, post, uploadPost, posts}\n    }\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}