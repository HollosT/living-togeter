{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-7dde4f98\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"input-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"name\"\n}, \"Add a name for your neighborhood:\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_4 = {\n  class: \"input-container\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"country\"\n}, \"Country:\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache) {\n  const _component_base_button = _resolveComponent(\"base-button\");\n  const _component_base_form = _resolveComponent(\"base-form\");\n  return _openBlock(), _createBlock(_component_base_form, null, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      id: \"name\",\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.formData.name.val = $event),\n      requeired: \"\",\n      autofocus: \"\",\n      onBlur: _cache[1] || (_cache[1] = $event => _ctx.inputUniqueValidation('name'))\n    }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, _ctx.formData.name.val, void 0, {\n      trim: true\n    }]])]), _hoisted_3, _createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      id: \"country\",\n      \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.formData.country.val = $event),\n      requeired: \"\"\n    }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.formData.country.val, void 0, {\n      trim: true\n    }]])]), _createCommentVNode(\" <div class=\\\"input-container\\\">\\n          <label for=\\\"city\\\">City:</label>\\n          <input type=\\\"text\\\" id=\\\"city\\\" v-model.trim=\\\"city.val\\\" requeired >\\n        </div>\\n        <div class=\\\"input-container\\\">\\n          <label for=\\\"postalCode\\\">Postal code:</label>\\n          <input type=\\\"number\\\" id=\\\"postalCode\\\" v-model.trim=\\\"postalCode.val\\\" requeired >\\n        </div>\\n\\n        <div class=\\\"input-container\\\">\\n          <label for=\\\"street\\\">Street:</label>\\n          <input type=\\\"text\\\" id=\\\"street\\\" v-model.trim=\\\"street.val\\\" requeired >\\n        </div>\\n\\n        <div class=\\\"input-container\\\">\\n          <label for=\\\"buildingNumber\\\">Building number:</label>\\n          <input type=\\\"number\\\" id=\\\"buildingNumber\\\" v-model.trim=\\\"buildingNumber.val\\\" requeired >\\n        </div>\\n\\n        <div class=\\\"input-container\\\">\\n          <label for=\\\"flats\\\">Number of flats:</label>\\n          <input type=\\\"number\\\" id=\\\"flats\\\" v-model.trim=\\\"flats.val\\\" requeired >\\n        </div>\\n        <div class=\\\"input-container\\\">\\n          <label for=\\\"description\\\">Description:</label>\\n          <textarea  id=\\\"description\\\"  rows=\\\"3\\\" v-model.trim=\\\"description.val\\\" requeired ></textarea>\\n        </div> \"), _createVNode(_component_base_button, {\n      type: \"filled\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"Send\")]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"mappings":";;;EAGaA,KAAK,EAAC;AAAiB;gEAC1BC,oBAA2D;EAApDC,GAAG,EAAC;AAAM,GAAC,mCAAiC;gEAGrDD,oBAAmB;EAAZE,IAAI,EAAC;AAAM;;EAEdH,KAAK,EAAC;AAAiB;gEACzBC,oBAAqC;EAA9BC,GAAG,EAAC;AAAS,GAAC,UAAQ;;;;;uBATjCE,aA0CYC;sBAxCV,MAGM,CAHNJ,oBAGM,OAHNK,UAGM,GAFJC,UAA2D,kBAC3DN,oBAAwH;MAAjHE,IAAI,EAAC,MAAM;MAACK,EAAE,EAAC,MAAM;iEAAeC,aAAQ,CAACC,IAAI,CAACC,GAAG;MAAEC,SAAS,EAAT,EAAS;MAACC,SAAS,EAAT,EAAS;MAAEC,MAAI,sCAAEL,0BAAqB;mEAAnEA,aAAQ,CAACC,IAAI,CAACC,GAAG;YAA/B;IAAgC,QAE/DI,UAAmB,EAEpBd,oBAGO,OAHPe,UAGO,GAFJC,UAAqC,kBACrChB,oBAA+E;MAAxEE,IAAI,EAAC,MAAM;MAACK,EAAE,EAAC,SAAS;iEAAeC,aAAQ,CAACS,OAAO,CAACP,GAAG;MAAEC,SAAS,EAAT;mDAAtBH,aAAQ,CAACS,OAAO,CAACP,GAAG;YAAlC;IAAmC,QAGrEQ,4uCA0BU,EAEVC,aAA6CC;MAAhClB,IAAI,EAAC;IAAQ;wBAAC,MAAI,kBAAJ,MAAI","names":["class","_createElementVNode","for","type","_createBlock","_component_base_form","_hoisted_1","_hoisted_2","id","_ctx","name","val","requeired","autofocus","onBlur","_hoisted_3","_hoisted_4","_hoisted_5","country","_createCommentVNode","_createVNode","_component_base_button"],"sourceRoot":"","sources":["/Users/tamashollos/Vue/living-together/src/components/buildings/BuildingForm.vue"],"sourcesContent":["<template>\n      <base-form >\n\n        <div class=\"input-container\">\n          <label for=\"name\">Add a name for your neighborhood:</label>\n          <input type=\"text\" id=\"name\" v-model.trim=\"formData.name.val\" requeired autofocus @blur=\"inputUniqueValidation('name')\">\n        </div>\n        <input type=\"text\">\n\n       <div class=\"input-container\">\n          <label for=\"country\">Country:</label>\n          <input type=\"text\" id=\"country\" v-model.trim=\"formData.country.val\" requeired >\n        </div> \n\n        <!-- <div class=\"input-container\">\n          <label for=\"city\">City:</label>\n          <input type=\"text\" id=\"city\" v-model.trim=\"city.val\" requeired >\n        </div>\n        <div class=\"input-container\">\n          <label for=\"postalCode\">Postal code:</label>\n          <input type=\"number\" id=\"postalCode\" v-model.trim=\"postalCode.val\" requeired >\n        </div>\n\n        <div class=\"input-container\">\n          <label for=\"street\">Street:</label>\n          <input type=\"text\" id=\"street\" v-model.trim=\"street.val\" requeired >\n        </div>\n\n        <div class=\"input-container\">\n          <label for=\"buildingNumber\">Building number:</label>\n          <input type=\"number\" id=\"buildingNumber\" v-model.trim=\"buildingNumber.val\" requeired >\n        </div>\n\n        <div class=\"input-container\">\n          <label for=\"flats\">Number of flats:</label>\n          <input type=\"number\" id=\"flats\" v-model.trim=\"flats.val\" requeired >\n        </div>\n        <div class=\"input-container\">\n          <label for=\"description\">Description:</label>\n          <textarea  id=\"description\"  rows=\"3\" v-model.trim=\"description.val\" requeired ></textarea>\n        </div> -->\n\n        <base-button type=\"filled\">Send</base-button>\n      </base-form>\n</template>\n\n<script>\nimport { isRef, ref } from '@vue/reactivity'\nimport { useStore } from 'vuex'\n\n\n\nexport default {\n\n\n    setup() {\n        const store = useStore()\n        const buildings =  store.getters[\"buildings/buildings\"]\n        console.log(buildings);\n\n        const formIsValid = ref(true)\n        const formData = ref({\n            name: {\n                id: 1,\n                val: '',\n                isValid: true\n            },\n            country: {\n                val: '',\n                isValid: true\n            }\n        })\n      \n       \n            // const country = ref({\n            //     val: '',\n            //     isValid: true\n            // }),\n            // const city = ref({\n            //     val: '',\n            //     isValid: true\n            // }),\n            // const postalCode = ref({\n            //     val: '',\n            //     isValid: true\n            // }),\n            // const street = ref({\n            //     val: '',\n            //     isValid: true\n            // }),\n            // const buildingNumber = ref({\n            //     val: '',\n            //     isValid: true\n            // }),\n            // const flats = ref({\n            //     val: '',\n            //     isValid: true\n            // }),\n            // const description = ref({\n            //     val: '',\n            //     isValid: true\n            // })\n\n      \n\n        function inputUniqueValidation(input) {\n            for( const key in formData.value) {\n               if(key === input) {\n                   const error = buildings.some(bld => {\n                        bld[input] == formData.value[input].val\n                        console.log( typeof(formData.value[input].val);\n                    })\n                    console.log(error);\n               }\n            }\n        \n        }\n\n\n\n    // function submitForm() {\n        \n    // }\n\n\n\n    return {formData, inputUniqueValidation}\n}\n}\n</script>\n\n<style scoped> \n    .input-container {\n        width: 80%;\n        margin: auto;\n        display: flex;\n        gap: 2vw;\n        margin-bottom: 3vw;\n    }\n\n    input,\n    textarea {\n        width: 25vw;\n        border-radius: .5vw;\n\n    }\n\n\n</style>"]},"metadata":{},"sourceType":"module"}