{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tamashollos/Git/living-togeter/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/tamashollos/Git/living-togeter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { useRoute } from 'vue-router';\nimport { useStore } from 'vuex';\nimport { computed, ref } from '@vue/runtime-core';\nimport BaseButton from '@/components/UI/BaseButton.vue';\nexport default {\n  components: {\n    BaseButton: BaseButton\n  },\n  setup: function setup() {\n    var route = useRoute();\n    var store = useStore();\n    var isApplied = ref(false);\n    var isLoggedIn = computed(function () {\n      return store.getters.isAuthenticated;\n    });\n    var building = computed(function () {\n      return store.getters['buildings/buildings'].find(function (bld) {\n        return bld.id === route.params.bid;\n      });\n    });\n    function loadApplications() {\n      return _loadApplications.apply(this, arguments);\n    }\n    function _loadApplications() {\n      _loadApplications = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var application;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return store.dispatch('residents/fetchApplications', route.params.bid);\n              case 3:\n                application = store.getters['residents/hasApplication'];\n                isApplied.value = application;\n                _context.next = 10;\n                break;\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n      return _loadApplications.apply(this, arguments);\n    }\n    loadApplications();\n    function apply() {\n      var request = {\n        email: localStorage.getItem('email'),\n        userId: localStorage.getItem('userId'),\n        buildingId: route.params.bid\n      };\n      store.dispatch('residents/apply', request);\n    }\n    return {\n      building: building,\n      isLoggedIn: isLoggedIn,\n      apply: apply\n    };\n  }\n};","map":{"version":3,"mappings":";;;;AAgBA,SAASA,QAAO,QAAS,YAAW;AACpC,SAASC,QAAO,QAAS,MAAK;AAC9B,SAASC,QAAQ,EAAEC,GAAE,QAAS,mBAAkB;AAChD,OAAOC,UAAS,MAAO,gCAA+B;AACtD,eAAe;EACbC,UAAU,EAAE;IAAED,UAAS,EAATA;EAAW,CAAC;EAExBE,KAAK,mBAAG;IACL,IAAMC,KAAI,GAAIP,QAAQ,EAAC;IACvB,IAAMQ,KAAI,GAAIP,QAAQ,EAAC;IACvB,IAAMQ,SAAQ,GAAIN,GAAG,CAAC,KAAK;IAE3B,IAAMO,UAAS,GAAIR,QAAQ,CAAC,YAAM;MACjC,OAAOM,KAAK,CAACG,OAAO,CAACC,eAAc;IACpC,CAAC;IAGD,IAAMC,QAAO,GAAIX,QAAQ,CAAC,YAAM;MAC7B,OAAOM,KAAK,CAACG,OAAO,CAAC,qBAAqB,CAAC,CAACG,IAAI,CAAC,aAAE;QAAA,OAAKC,GAAG,CAACC,EAAC,KAAMT,KAAK,CAACU,MAAM,CAACC,GAAG;MAAA;IAEtF,CAAC;IAAA,SAGcC,gBAAgB;MAAA;IAAA;IAAA;MAAA,+EAA/B;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAGcX,KAAK,CAACY,QAAQ,CAAC,6BAA6B,EAAEb,KAAK,CAACU,MAAM,CAACC,GAAG;cAAA;gBAC9DG,WAAU,GAAIb,KAAK,CAACG,OAAO,CAAC,0BAA0B;gBAC5DF,SAAS,CAACa,KAAI,GAAID,WAAU;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAG3BE,OAAO,CAACC,GAAG,aAAK;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAExB;MAAA;IAAA;IACAL,gBAAgB,EAAC;IAKlB,SAAUM,KAAK,GAAG;MACb,IAAMC,OAAM,GAAI;QACZC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QACpCC,MAAM,EAAEF,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;QACtCE,UAAU,EAAExB,KAAK,CAACU,MAAM,CAACC;MAC7B;MAEAV,KAAK,CAACY,QAAQ,CAAC,iBAAiB,EAAEM,OAAO;IAE9C;IAEA,OAAM;MAACb,QAAQ,EAARA,QAAQ;MAAEH,UAAU,EAAVA,UAAU;MAAEe,KAAK,EAALA;IAAK;EAErC;AACJ","names":["useRoute","useStore","computed","ref","BaseButton","components","setup","route","store","isApplied","isLoggedIn","getters","isAuthenticated","building","find","bld","id","params","bid","loadApplications","dispatch","application","value","console","log","apply","request","email","localStorage","getItem","userId","buildingId"],"sourceRoot":"","sources":["/Users/tamashollos/Git/living-togeter/src/pages/buildings/BuildingDetail.vue"],"sourcesContent":["<template>\n    <base-card>\n        <h2>{{building.name}}</h2>\n        <p>{{building.description}}</p>\n\n        <base-button v-if=\"isLoggedIn\" link :to=\"'/residents/' + building.id\" type=\"filled\" @click=\"apply\">Join this community</base-button>\n        <div v-else-if=\"!isLoggedIn\">\n            <p>You need to log in to apply for this community</p>\n            <router-link link to=\"/auth\" type=\"filled\">Login</router-link>\n        </div>\n\n    </base-card>\n</template>\n\n<script>\n\nimport { useRoute } from 'vue-router'\nimport { useStore } from 'vuex'\nimport { computed, ref } from '@vue/runtime-core'\nimport BaseButton from '@/components/UI/BaseButton.vue'\nexport default {\n  components: { BaseButton },\n\n    setup() {\n       const route = useRoute()\n       const store = useStore()\n       const isApplied = ref(false)\n\n       const isLoggedIn = computed(() => {\n        return store.getters.isAuthenticated\n       })\n\n       \n       const building = computed(() => {\n          return store.getters['buildings/buildings'].find(bld => bld.id === route.params.bid)\n            \n       })\n\n\n       async function loadApplications() {\n           try{\n               \n               await store.dispatch('residents/fetchApplications', route.params.bid)\n               const application = store.getters['residents/hasApplication']\n               isApplied.value = application\n               \n            } catch(err) {\n                console.log(err);\n            }\n        }\n        loadApplications()\n\n\n       \n\n       function  apply() {    \n            const request = {\n                email: localStorage.getItem('email'),\n                userId: localStorage.getItem('userId'),\n                buildingId: route.params.bid\n            }\n\n            store.dispatch('residents/apply', request)\n\n       }\n\n       return{building, isLoggedIn, apply}\n       \n    }\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}