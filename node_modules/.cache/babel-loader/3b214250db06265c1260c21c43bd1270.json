{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_community_list = _resolveComponent(\"community-list\");\n  var _component_base_card = _resolveComponent(\"base-card\");\n  return _openBlock(), _createBlock(_component_base_card, null, {\n    \"default\": _withCtx(function () {\n      return [_createElementVNode(\"h2\", null, _toDisplayString($setup.building.name), 1 /* TEXT */), _createVNode(_component_community_list, {\n        members: $setup.members\n      }, null, 8 /* PROPS */, [\"members\"])];\n    }),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"mappings":";;;;;uBACAA,aAIYC;wBAHJ;MAAA,OAA0B,CAA1BC,oBAA0B,6BAApBC,eAAQ,CAACC,IAAI,kBAEnBC,aAAoDC;QAAnCC,OAAO,EAAEJ;MAAO","names":["_createBlock","_component_base_card","_createElementVNode","$setup","name","_createVNode","_component_community_list","members"],"sourceRoot":"","sources":["/Users/tamashollos/Git/living-togeter/src/pages/community/Community.vue"],"sourcesContent":["<template>\n<base-card>\n        <h2>{{building.name}}</h2>\n\n        <community-list :members=\"members\"></community-list>\n</base-card>\n\n</template>\n\n<script>\nimport { ref } from '@vue/reactivity'\nimport { useStore } from 'vuex'\nimport CommunityList from '@/components/community/CommunityList.vue'\nimport BaseCard from '@/components/UI/BaseCard.vue'\n\nexport default {\n  components: { CommunityList, BaseCard },\n    setup() {\n        const store = useStore()\n        const building = ref({})\n        const members = ref([])\n\n\n        async function init() {\n            const buildingId = localStorage.getItem('buildingMember')\n            try {\n                // Fetch the current building\n                await store.dispatch('buildings/loadBuilding', buildingId)\n\n               const curBuilding = await store.getters['buildings/buildings']\n                building.value = curBuilding\n\n\n                // Fetch the residents of the building\n                await store.dispatch('residents/fetchApplications', buildingId)\n\n                const curApplications = await store.getters['residents/getApplications']\n\n               for(const key in curApplications) {\n                   const userId = curApplications[key].userId;\n\n                   await store.dispatch('profiles/fetchProfile', userId)\n                   const wannabeMember = await stor\n\n                    \n               }\n\n            } catch(err) {\n                console.log(err);\n            }\n\n        }\n        \n        init()\n        \n\n        return {building, members}\n    }\n\n\n}\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}